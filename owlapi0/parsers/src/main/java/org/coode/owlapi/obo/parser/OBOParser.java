/* Generated By:JavaCC: Do not edit this line. OBOParser.java */
package org.coode.owlapi.obo.parser;

import org.semanticweb.owlapi.model.OWLRuntimeException;

import uk.ac.manchester.cs.BOMSafeJavaCharStream;

/** obo parser. */
public class OBOParser implements OBOParserConstants {

    /** The handler. */
    private OBOParserHandler handler;

    /**
     * Sets the handler.
     * 
     * @param handler
     *        the new handler
     */
    public void setHandler(OBOParserHandler handler) {
        this.handler = handler;
    }

    /**
     * Parses the.
     * 
     * @throws ParseException
     *         the parse exception
     */
    final public void parse() throws ParseException {
        Header();
        label_1: while (true) {
            Stanza();
            switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                case OPEN_SQUARE_BRACKET:
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
        }
        jj_consume_token(0);
    }

    /**
     * Header.
     * 
     * @throws ParseException
     *         the parse exception
     */
    final public void Header() throws ParseException {
        handler.startHeader();
        label_2: while (true) {
            switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                case TAG_NAME:
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            TagValuePair();
        }
        handler.endHeader();
    }

    /**
     * Stanza.
     * 
     * @throws ParseException
     *         the parse exception
     */
    final public void Stanza() throws ParseException {
        Token t;
        jj_consume_token(OPEN_SQUARE_BRACKET);
        t = jj_consume_token(STANZA_TYPE);
        handler.startFrame(t.image);
        jj_consume_token(CLOSE_SQUARE_BRACKET);
        label_3: while (true) {
            switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                case TAG_NAME:
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_3;
            }
            TagValuePair();
        }
        handler.endFrame();
    }

    /**
     * Tag value pair.
     * 
     * @throws ParseException
     *         the parse exception
     */
    final public void TagValuePair() throws ParseException {
        Token tagToken = null;
        String qualifierBlock = "";
        String comment = "";
        Token t;
        StringBuilder sb = new StringBuilder();
        tagToken = jj_consume_token(TAG_NAME);
        label_4: while (true) {
            switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                case QUOTED_STRING:
                case STRING:
                case TAG_VALUE_WS:
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_4;
            }
            switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
                case QUOTED_STRING:
                    t = jj_consume_token(QUOTED_STRING);
                    sb.append(t.image);
                    break;
                case STRING:
                    t = jj_consume_token(STRING);
                    sb.append(t.image);
                    break;
                case TAG_VALUE_WS:
                    t = jj_consume_token(TAG_VALUE_WS);
                    sb.append(t.image);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
            case COMMENT:
                comment = Comment();
                break;
            default:
                jj_la1[5] = jj_gen;
        }
        String name = tagToken.image.trim();
        String val = sb.toString().trim();
        if (val.endsWith("}")) {
            int qualifierStart = val.lastIndexOf("{");
            if (qualifierStart != -1) {
                qualifierBlock = val.substring(qualifierStart);
                val = val.substring(0, qualifierStart).trim();
            }
        }
        handler.handleTagValue(name, val, qualifierBlock, comment);
    }

    /**
     * Comment.
     * 
     * @return the string
     * @throws ParseException
     *         the parse exception
     */
    final public String Comment() throws ParseException {
        Token t;
        t = jj_consume_token(COMMENT);
        return t.image;
    }

    /** Generated Token Manager. */
    public OBOParserTokenManager token_source;
    /** The jj_input_stream. */
    BOMSafeJavaCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    /** The jj_ntk. */
    private int jj_ntk;
    /** The jj_gen. */
    private int jj_gen;
    /** The jj_la1. */
    final private int[] jj_la1 = new int[6];
    /** The jj_la1_0. */
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }

    /** Jj_la1_init_0. */
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x40, 0x200, 0x200, 0x19000, 0x19000, 0x80000, };
    }

    /**
     * Constructor with InputStream.
     * 
     * @param stream
     *        the stream
     */
    public OBOParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding.
     * 
     * @param stream
     *        the stream
     * @param encoding
     *        the encoding
     */
    public OBOParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new BOMSafeJavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new OWLRuntimeException(e);
        }
        token_source = new OBOParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     * 
     * @param stream
     *        the stream
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     * 
     * @param stream
     *        the stream
     * @param encoding
     *        the encoding
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new OWLRuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     * 
     * @param stream
     *        the stream
     */
    public OBOParser(java.io.Reader stream) {
        jj_input_stream = new BOMSafeJavaCharStream(stream, 1, 1);
        token_source = new OBOParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     * 
     * @param stream
     *        the stream
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     * 
     * @param tm
     *        the tm
     */
    public OBOParser(OBOParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     * 
     * @param tm
     *        the tm
     */
    public void ReInit(OBOParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Jj_consume_token.
     * 
     * @param kind
     *        the kind
     * @return the token
     * @throws ParseException
     *         the parse exception
     */
    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     * 
     * @return the next token
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     * 
     * @param index
     *        the index
     * @return the token
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    /**
     * Jj_ntk.
     * 
     * @return the int
     */
    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return jj_ntk = (token.next = token_source.getNextToken()).kind;
        } else {
            return jj_ntk = jj_nt.kind;
        }
    }

    /** The jj_expentries. */
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    /** The jj_expentry. */
    private int[] jj_expentry;
    /** The jj_kind. */
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     * 
     * @return the parses the exception
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[22];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 6; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & 1 << j) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 22; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {}

    /** Disable tracing. */
    final public void disable_tracing() {}
}
