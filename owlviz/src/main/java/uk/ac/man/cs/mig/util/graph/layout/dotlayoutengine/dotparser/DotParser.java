/* Generated By:JavaCC: Do not edit this line. DotParser.java */
package uk.ac.man.cs.mig.util.graph.layout.dotlayoutengine.dotparser;
import java.io.*;
import java.util.*;

public class DotParser implements DotParserConstants {
        private static boolean gotGraphBB;

        private static DotParameterSetter paramSetter;

        public static void parse(DotParameterSetter setter, InputStream inputStream) throws ParseException
        {
                paramSetter = setter;

                gotGraphBB = false;

        String s = DotPreParser.preParse(inputStream);
        try {
            InputStream iStream = new ByteArrayInputStream(s.getBytes("UTF-8"));

            DotParser parser = new DotParser(iStream, "UTF-8");

            parser.start();
        }
        catch (UnsupportedEncodingException e) {
            throw new ParseException("Cannot parse the input - bad encoding");
        }
        }

        public static void setGraphAttribute(String name, String value)
        {
                if(name.equals("bb"))
                {
                        if(gotGraphBB == false)
                        {
                                paramSetter.setGraphAttribute(name, removeQuotes(value));

                                gotGraphBB = true;
                        }
                }
                else
                {
                        paramSetter.setGraphAttribute(name, removeQuotes(value));
                }
        }

        public static void setNodeAttribute(String nodeID, String name, String value)
        {
                paramSetter.setNodeAttribute(removeQuotes(nodeID), name, removeQuotes(value));
        }

        public static void setEdgeAttribute(String tailNode, String headNode, String name, String value)
        {
                paramSetter.setEdgeAttribute(removeQuotes(tailNode), removeQuotes(headNode), name, removeQuotes(value));
        }

        protected static String removeQuotes(String s)
        {
                if(s.charAt(0) == '\u005c"' && s.charAt(s.length() - 1) == '\u005c"')
                {
                        return s.substring(1, s.length() - 1);
                }
                else
                {
                        return s;
                }
        }

  final public void start() throws ParseException {
    graph();
  }

  final public void graph() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KWSTRICT:
      jj_consume_token(KWSTRICT);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KWGRAPH:
      jj_consume_token(KWGRAPH);
      break;
    case KWDIGRAPH:
      jj_consume_token(KWDIGRAPH);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(20);
    label_1:
    while (true) {
      stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KWGRAPH:
      case KWSUBGRAPH:
      case KWNODE:
      case KWEDGE:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(21);
  }

  final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      node_or_edge_stmt();
      break;
    case KWGRAPH:
    case KWNODE:
    case KWEDGE:
      attr_stmt();
      break;
    case KWSUBGRAPH:
      subgraph();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(22);
    }
  }

  final public void node_or_edge_stmt() throws ParseException {
        String id1, id2 = null;
        String name = "";
        String value = "";
    id1 = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EDGEOP:
      jj_consume_token(EDGEOP);
      id2 = ID();
      jj_consume_token(SQOPENPAR);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        name = ID();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(EQUALS);
          value = ID();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
                                setEdgeAttribute(id1, id2, name, value);

                                name = "";

                                value = "";
      }
      jj_consume_token(SQCLOSEPAR);
      break;
    case SQOPENPAR:
      jj_consume_token(SQOPENPAR);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        name = ID();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
          jj_consume_token(EQUALS);
          value = ID();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
                                setNodeAttribute(id1, name, value);

                                name = "";

                                value = "";
      }
      jj_consume_token(SQCLOSEPAR);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void attr_stmt() throws ParseException {
        String name = "";
        String value = "";

        final int TYPE_GRAPH = 0;
        final int TYPE_NODE = 1;
        final int TYPE_EDGE = 2;

        int TYPE = TYPE_GRAPH;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KWGRAPH:
      jj_consume_token(KWGRAPH);
                        TYPE = TYPE_GRAPH;
      break;
    case KWNODE:
      jj_consume_token(KWNODE);
                        TYPE = TYPE_NODE;
      break;
    case KWEDGE:
      jj_consume_token(KWEDGE);
                        TYPE = TYPE_EDGE;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SQOPENPAR);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      name = ID();
      jj_consume_token(EQUALS);
      value = ID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
                        if(TYPE == TYPE_GRAPH)
                        {
                                setGraphAttribute(name, value);
                        }
                        name = "";

                        value = "";
    }
    jj_consume_token(SQCLOSEPAR);
  }

  final public void subgraph() throws ParseException {
    jj_consume_token(KWSUBGRAPH);
    ID();
    jj_consume_token(20);
    label_8:
    while (true) {
      stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KWGRAPH:
      case KWSUBGRAPH:
      case KWNODE:
      case KWEDGE:
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(21);
  }

  final public String ID() throws ParseException {
        Token t;
    t = jj_consume_token(ID);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public DotParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0xc0,0x10000,0x10740,0x10740,0x400000,0x10000,0x2000,0x4000,0x10000,0x2000,0x4000,0x8800,0x640,0x10000,0x4000,0x10740,};
   }

  /** Constructor with InputStream. */
  public DotParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DotParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DotParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DotParser(DotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
